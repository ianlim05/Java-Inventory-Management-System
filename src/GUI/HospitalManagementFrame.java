/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Models.Hospital;
import Management.InventoryManager;
import Utils.FileManager;
import java.io.File;

import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author USER
 */
public class HospitalManagementFrame extends javax.swing.JFrame {
    private InventoryManager inventoryManager;
    private DefaultTableModel tableModel;
    
    public HospitalManagementFrame() {
        initComponents();
        
        
        inventoryManager = new InventoryManager(); // Initialize InventoryManager
        tableModel = (DefaultTableModel) tableHospital.getModel(); // Get table model from JTable
        loadHospitalToTable(); // Load existing suppliers into the table
    }
    
    private void loadHospitalToTable() {
        String filePath = "hospitals.txt";

        try {
            // Check if file exists, if not create it
            File file = new File(filePath);
            if (!file.exists()) {
                file.createNewFile(); // Creates an empty hospitals.txt file if it doesn't exist
            }

            // Load data into table from file
            FileManager.loadTableDataFromFile(tableHospital, filePath);  
            inventoryManager.loadOrganizationsFromFile(filePath);
            
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading hospital data: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableHospital = new javax.swing.JTable();
        btnUpdateHospital = new javax.swing.JButton();
        btnDeleteHospital = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtHospitalName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnAddHospital = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnClearAll = new javax.swing.JButton();
        closebutton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtHospitalAddress = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        txtHospitalContact = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(440, 120));
        setMaximumSize(new java.awt.Dimension(900, 600));
        setUndecorated(true);

        tableHospital.setBackground(new java.awt.Color(255, 204, 204));
        tableHospital.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tableHospital.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Contact", "Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableHospital.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableHospitalMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableHospital);
        if (tableHospital.getColumnModel().getColumnCount() > 0) {
            tableHospital.getColumnModel().getColumn(0).setPreferredWidth(5);
            tableHospital.getColumnModel().getColumn(1).setPreferredWidth(20);
            tableHospital.getColumnModel().getColumn(2).setPreferredWidth(20);
        }

        btnUpdateHospital.setBackground(new java.awt.Color(153, 255, 255));
        btnUpdateHospital.setText("UPDATE");
        btnUpdateHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateHospitalActionPerformed(evt);
            }
        });

        btnDeleteHospital.setBackground(new java.awt.Color(255, 102, 102));
        btnDeleteHospital.setText("DELETE");
        btnDeleteHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteHospitalActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Name");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Address");

        btnAddHospital.setBackground(new java.awt.Color(153, 255, 153));
        btnAddHospital.setText("ADD");
        btnAddHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddHospitalActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(204, 204, 255));
        jLabel1.setFont(new java.awt.Font("UA Cadet", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 153, 0));
        jLabel1.setText("HOSPITAL MANAGEMENT");

        btnClearAll.setBackground(new java.awt.Color(0, 255, 204));
        btnClearAll.setText("CLEAR ALL");
        btnClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAllActionPerformed(evt);
            }
        });

        closebutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/2.png"))); // NOI18N
        closebutton.setAlignmentY(0.0F);
        closebutton.setBorderPainted(false);
        closebutton.setMinimumSize(new java.awt.Dimension(50, 50));
        closebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closebuttonActionPerformed(evt);
            }
        });

        txtHospitalAddress.setColumns(20);
        txtHospitalAddress.setRows(5);
        txtHospitalAddress.setPreferredSize(new java.awt.Dimension(232, 120));
        jScrollPane2.setViewportView(txtHospitalAddress);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Contact");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(167, 167, 167)
                        .addComponent(closebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(btnAddHospital)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnUpdateHospital)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnDeleteHospital))
                                        .addComponent(txtHospitalContact, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtHospitalName, javax.swing.GroupLayout.Alignment.LEADING)))
                                .addGap(34, 34, 34))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnClearAll)
                                .addGap(13, 13, 13))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(closebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(btnClearAll)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtHospitalName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(12, 12, 12)
                        .addComponent(txtHospitalContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddHospital)
                            .addComponent(btnUpdateHospital)
                            .addComponent(btnDeleteHospital))
                        .addContainerGap(184, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAllActionPerformed
        clearFields();
        
        btnAddHospital.setEnabled(true);
        btnUpdateHospital.setEnabled(false);
    }//GEN-LAST:event_btnClearAllActionPerformed

    private void closebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closebuttonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_closebuttonActionPerformed

    private void tableHospitalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableHospitalMouseClicked
        int index = tableHospital.getSelectedRow();
        TableModel model = tableHospital.getModel();
        String code = model.getValueAt (index, 0).toString();
        String name = model.getValueAt(index, 1).toString();
        String contact = model.getValueAt(index, 2).toString();
        String address = model.getValueAt(index, 3).toString();
        
        
        txtHospitalName.setText(name);
        txtHospitalContact.setText(contact);
        txtHospitalAddress.setText(address);
        
           
        txtHospitalName.setEditable(true);
        txtHospitalContact.setEditable(true);
        txtHospitalAddress.setEditable(true);
    
        btnAddHospital.setEnabled(false);
        btnUpdateHospital.setEnabled(true);
    }//GEN-LAST:event_tableHospitalMouseClicked

    private void btnAddHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddHospitalActionPerformed
        String code = generateHospitalCode();
        String name = txtHospitalName.getText();
        String contact = txtHospitalContact.getText();
        String address = txtHospitalAddress.getText();
        
        String contactNumDash = "^[0-9-]+$"; 
        if (name.isEmpty() || contact.isEmpty() || address.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields must be filled before adding a hospital!", "Input Error", JOptionPane.ERROR_MESSAGE);
        } else if (!contact.matches(contactNumDash)){
            JOptionPane.showMessageDialog(this, "Contact can only contain numbers and dashes!", "Input Error", JOptionPane.ERROR_MESSAGE);
        } else {
        // Create a new Supplier object
        Hospital hospital = new Hospital(code, name.trim(), contact.trim(), address.trim());

        // Use InventoryManager to add the new supplier
        inventoryManager.addOrganization(hospital);

        // Update the table to reflect the new supplier
        tableModel.addRow(new Object[]{hospital.getHospitalCode(), hospital.getName(), hospital.getContact(), hospital.getAddress()});
        saveHospitalsToFile();
        clearFields();
        }
    }//GEN-LAST:event_btnAddHospitalActionPerformed
    
    private String generateHospitalCode() {
        String prefix = "HPL";  
        int maxCodeNumber = 0;

        
        for (int i = 0; i < tableHospital.getRowCount(); i++) {
            String currentCode = tableHospital.getValueAt(i, 0).toString();

            if (currentCode.startsWith(prefix)) {
                // Extract the numeric part of the code and parse it to an integer
                int currentNumber = Integer.parseInt(currentCode.substring(3));
                if (currentNumber > maxCodeNumber) {
                    maxCodeNumber = currentNumber;
                }
            }
        }

        // Increment the highest code number by 1 to generate the new code
        int nextCodeNumber = maxCodeNumber + 1;
        return prefix + String.format("%03d", nextCodeNumber);  
    }
    
    private void btnUpdateHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateHospitalActionPerformed
        int selectedRow = tableHospital.getSelectedRow();
        if (selectedRow != -1) {               
            
            String hospitalCode = tableHospital.getValueAt(selectedRow, 0).toString();  
            
            
            // Fetch the hospital from the inventory manager using the original hospital code
            Hospital hospital = (Hospital) inventoryManager.getOrganizationByCode(hospitalCode);

            if (hospital != null) {
                hospital.setName(txtHospitalName.getText());
                hospital.setContact(txtHospitalContact.getText());
                hospital.setAddress(txtHospitalAddress.getText());
                
                TableModel model = tableHospital.getModel();
                model.setValueAt(hospital.getHospitalCode(), selectedRow, 0);  
                model.setValueAt(hospital.getName(), selectedRow, 1);
                model.setValueAt(hospital.getContact(), selectedRow, 2);
                model.setValueAt(hospital.getAddress(), selectedRow, 3);

                // Save the updated hospitals to the file
                saveHospitalsToFile();
            } else {
                // Handle the case where the hospital was not found
                JOptionPane.showMessageDialog(this, "Hospital not found!");
            }
        } else {
            // Handle the case where no row is selected
            JOptionPane.showMessageDialog(this, "Please select a hospital to update!");
        }
    }//GEN-LAST:event_btnUpdateHospitalActionPerformed

    private void btnDeleteHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteHospitalActionPerformed
        int selectedRow = tableHospital.getSelectedRow();  // Get the selected row
        if (selectedRow != -1) {  // Check if a row is selected
            // Confirm deletion
            int confirm = JOptionPane.showConfirmDialog(null, 
                    "Are you sure you want to delete this hospital?", "Delete Hospital", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                // Get the supplier code from the selected row (primary key)
                TableModel model = tableHospital.getModel();
                String code = model.getValueAt(selectedRow, 0).toString();
                

                // Remove supplier from InventoryManager
                inventoryManager.deleteOrganizationByCode(code);  

                // Remove the row from the table
                DefaultTableModel tableModel = (DefaultTableModel) tableHospital.getModel();
                tableModel.removeRow(selectedRow);

                // Clear text fields
                
                txtHospitalName.setText("");
                txtHospitalContact.setText("");
                txtHospitalAddress.setText("");

                // Reset buttons
                btnAddHospital.setEnabled(true);
                btnUpdateHospital.setEnabled(false);

                // Save the updated table data to the file
                savedeletedHospitalsToFile();

                JOptionPane.showMessageDialog(this, "Hospital deleted successfully.");
            }
        } else {
            // No row selected
            JOptionPane.showMessageDialog(this, "Please select a hospital to delete.");
        }
    }//GEN-LAST:event_btnDeleteHospitalActionPerformed
    
    private void saveHospitalsToFile() {
        String filePath = "hospitals.txt";
        try {
            FileManager.saveTableDataToFile(tableHospital, filePath);
            JOptionPane.showMessageDialog(this, "Hospitals data saved successfully!");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving hospital data: " + e.getMessage());
        }
    }

    private void savedeletedHospitalsToFile() {
        String filePath = "hospitals.txt";
        try {
            FileManager.saveTableDataToFile(tableHospital, filePath);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving hospital data: " + e.getMessage());
        }
    }
    
    private void clearFields() {
        txtHospitalName.setText("");
        txtHospitalContact.setText("");
        txtHospitalAddress.setText("");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HospitalManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HospitalManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HospitalManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HospitalManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HospitalManagementFrame().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddHospital;
    private javax.swing.JButton btnClearAll;
    private javax.swing.JButton btnDeleteHospital;
    private javax.swing.JButton btnUpdateHospital;
    private javax.swing.JButton closebutton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableHospital;
    private javax.swing.JTextArea txtHospitalAddress;
    private javax.swing.JTextField txtHospitalContact;
    private javax.swing.JTextField txtHospitalName;
    // End of variables declaration//GEN-END:variables
}
