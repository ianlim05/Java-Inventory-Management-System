/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;



import Management.UserManagement;
import Utils.FileManager;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

 
/**
 *
 * @author jun20
 */
public class UserManagementFrame extends javax.swing.JFrame {
    
    private DefaultTableModel model;
    
    public UserManagementFrame() {
        initComponents();
        
   
        model = (DefaultTableModel) Table.getModel();
        loadItemToTable();
        
        
    }
        private void loadItemToTable() {
    String filePath = "users.txt";  
    DefaultTableModel model = (DefaultTableModel) Table.getModel();  
    model.setRowCount(0); // Clear existing rows

    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
        String line;
        boolean isFirstLine = true;  // Variable to track if it's the header

        while ((line = br.readLine()) != null) {
            
            line = line.trim();

            // Skip the header
            if (isFirstLine) {
                isFirstLine = false;
                continue;
            }

            // Skip empty lines
            if (line.isEmpty()) {
                continue;
            }

            // Split the line by tab
            String[] data = line.split("\t");

            // Check if the data has exactly 4 fields
            if (data.length == 4) {
                model.addRow(new Object[] { data[0].trim(), data[1].trim(), data[2].trim(), data[3].trim() });
            } else {
                // Log the exact line that caused the error for debugging
                JOptionPane.showMessageDialog(this, "Invalid data format in line: " + line);
            }
        }

        
    } catch (IOException e) {
    }
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        U_Name = new javax.swing.JTextField();
        BtnUpdate = new javax.swing.JButton();
        BtnAdd = new javax.swing.JButton();
        BtnDelete = new javax.swing.JButton();
        CB1 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        Pswd = new javax.swing.JTextField();
        BtnClear = new javax.swing.JButton();
        Btn_Search = new javax.swing.JButton();
        BtnReset = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(440, 120));
        setUndecorated(true);
        setResizable(false);

        Table.setBackground(new java.awt.Color(204, 255, 255));
        Table.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User ID", "Username", "Password", "User Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.setGridColor(new java.awt.Color(0, 0, 0));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        jLabel1.setFont(new java.awt.Font("UA Cadet", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 255));
        jLabel1.setText("User Management");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Username  :");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("User Type  :");

        BtnUpdate.setBackground(new java.awt.Color(153, 255, 255));
        BtnUpdate.setText("Update");
        BtnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnUpdateActionPerformed(evt);
            }
        });

        BtnAdd.setBackground(new java.awt.Color(153, 255, 153));
        BtnAdd.setText("Add");
        BtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAddActionPerformed(evt);
            }
        });

        BtnDelete.setBackground(new java.awt.Color(255, 102, 102));
        BtnDelete.setText("Delete");
        BtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDeleteActionPerformed(evt);
            }
        });

        CB1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Staff", "Admin" }));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Password   :");

        BtnClear.setBackground(new java.awt.Color(0, 255, 204));
        BtnClear.setText("CLEAR ALL");
        BtnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnClearActionPerformed(evt);
            }
        });

        Btn_Search.setText("Search");
        Btn_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_SearchActionPerformed(evt);
            }
        });

        BtnReset.setText("Reset");
        BtnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnResetActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/2.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(14, 14, 14)
                                    .addComponent(U_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(14, 14, 14)
                                    .addComponent(Pswd, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addGap(14, 14, 14)
                                    .addComponent(CB1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(BtnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Btn_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(BtnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(6, 6, 6)
                                    .addComponent(BtnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(4, 4, 4)
                                    .addComponent(BtnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(BtnClear))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addContainerGap(13, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(270, 270, 270)
                        .addComponent(jButton1))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(166, 166, 166)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BtnClear)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addComponent(jLabel3))
                                    .addComponent(U_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addComponent(jLabel6))
                                    .addComponent(Pswd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addComponent(jLabel5))
                                    .addComponent(CB1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(61, 61, 61)
                                .addComponent(BtnReset)
                                .addGap(12, 12, 12)
                                .addComponent(Btn_Search)
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(BtnAdd)
                                    .addComponent(BtnUpdate)
                                    .addComponent(BtnDelete))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
private String generateUID() {
    int nextUID = findNextAvailableUID();
    return "USR" + String.format("%03d", nextUID);
}


private int findNextAvailableUID() {
    Set<Integer> existingUIDs = new HashSet<>();  // HashSet = collection that stores items in no particular order and does not allow duplicates.
    try {
        File file = new File("users.txt");
        if (file.exists()) {
            Scanner scanner = new Scanner(file);
            // Skip header
            if (scanner.hasNextLine()) {
                scanner.nextLine();
            }
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine().trim();
                // Skip empty lines
                if (line.isEmpty()) {
                    continue;
                }
                String[] parts = line.split("\t");
                if (parts.length > 0) {  // If in the row got at least one element
                    String uidStr = parts[0];  // 
                    int uidNum = Integer.parseInt(uidStr.substring(3).trim()); // Extract numeric part
                    existingUIDs.add(uidNum);
                }
            }
            scanner.close();
        }
    } catch (FileNotFoundException e) {
        System.out.println("The file was not found.");
    } catch (NumberFormatException e) {
        System.out.println("Error parsing UID: " + e.getMessage());
    }

    // Find the next available UID
    for (int i = 1; ; i++) {
        if (!existingUIDs.contains(i)) {
            return i; // Return the first missing UID
        }
    }
}




    private void BtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAddActionPerformed
       String UID = generateUID();
       String Name = U_Name.getText();
       String UT = CB1.getSelectedItem().toString();
       String Pd = Pswd.getText();
       String filepath = "users.txt";
       
       
 if (Name.equals("") || Pd.equals("")) {
        JOptionPane.showMessageDialog(null, "Please fill in all fields");
        return; // Stop execution if fields are empty
    }
    
    try {
        File file = new File(filepath);
        UserManagement userManagement = new UserManagement();
        
        // Check if the username already exists
        if (userManagement.checkIfUserExists(Name)) {
            JOptionPane.showMessageDialog(null, "Username already exists!");
            U_Name.setText("");
            Pswd.setText("");
            return; // Stop execution if username already exists
        }

        // Append to the file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file, true))) {
            // Check if the file is empty to write the header
            if (file.length() == 0) {
                writer.write("User ID\tUsername\tPassword\tUser Type");
                writer.newLine();
            }
            
            
            // Write the user data to the file
            writer.write(UID + "\t" + Name + "\t" + Pd + "\t" + UT);
            writer.newLine();

            
            model.addRow(new Object[]{UID, Name, Pd, UT});
            
            JOptionPane.showMessageDialog(this, "User added successfully");

            // Clear the input fields
           
            U_Name.setText("");
            Pswd.setText("");
        }
        
        
        saveUserToFile();
        
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error occurred while saving the user");
    }
         

    }//GEN-LAST:event_BtnAddActionPerformed

    private void BtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDeleteActionPerformed
        int selectedRow = Table.getSelectedRow();
    if (selectedRow != -1) {
        model.removeRow(selectedRow);  // Remove the selected row from the table
        savedeletedItemToFile();  // Save the updated table to the file
        JOptionPane.showMessageDialog(this, "User data deleted successfully");
        U_Name.setText("");
            Pswd.setText("");
    } else {
        JOptionPane.showMessageDialog(this, "Please select a row to delete");
    }


    }//GEN-LAST:event_BtnDeleteActionPerformed

    private void BtnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnUpdateActionPerformed
                int selectedRow = Table.getSelectedRow();
    if (selectedRow != -1) {
            // Update the table with the new values from the text fields
            model.setValueAt(U_Name.getText(), selectedRow, 1);  
            model.setValueAt(CB1.getSelectedItem(), selectedRow, 3); 
            model.setValueAt(Pswd.getText(), selectedRow,2 );
             saveUserToFile();
        
              // Save the updated table to the file
            JOptionPane.showMessageDialog(this, "User edited successfully");
            U_Name.setText("");
            Pswd.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to edit");
        }


    }//GEN-LAST:event_BtnUpdateActionPerformed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        int selectedRow = Table.getSelectedRow();
        if (selectedRow != -1) {
            
            U_Name.setText(model.getValueAt(selectedRow, 1).toString());  // Get and set name
            CB1.setSelectedItem(model.getValueAt(selectedRow, 3).toString());  // Get and set type
            Pswd.setText(model.getValueAt(selectedRow, 2).toString()); // Get and set Password
        }
    }//GEN-LAST:event_TableMouseClicked
    
    private void saveUserToFile() {
        String filePath = "users.txt";
        try {
            FileManager.saveTableDataToFile(Table, filePath);
            
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving Item data: " + e.getMessage());
        }
    }
    
    private void BtnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnClearActionPerformed

        U_Name.setText("");
        Pswd.setText("");
    }//GEN-LAST:event_BtnClearActionPerformed

    private void Btn_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_SearchActionPerformed
    String Name = U_Name.getText().trim();
    String UT = CB1.getSelectedItem().toString().trim();
    String filepath = "users.txt";
    
    if (Name.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter Username.");
        return; 
    }
    
    DefaultTableModel model = (DefaultTableModel) Table.getModel();
    
    // Clear existing rows in the table before displaying new search results
    model.setRowCount(0);

    
    try (BufferedReader br = new BufferedReader(new FileReader(filepath))) {
        String line;
        boolean found = false;
        
        br.readLine();
        
        while ((line = br.readLine()) != null) {
            
            String[] userDetails = line.split("\t");
            
            // Ensure that the line has at least 4 fields
           if (userDetails.length == 4) {
                // Check if the user matches based on provided input fields
                boolean nameMatches = Name.isEmpty() || userDetails[1].equals(Name);
                
                
                // If all the non-empty fields match, display the result
                if (nameMatches) {
                    found = true;
                    // Add the user data to the table
                    model.addRow(new Object[] { userDetails[0], userDetails[1], userDetails[2] , userDetails[3]});
                }
            }
        }

        if (!found) {
            // If no matching users are found
            JOptionPane.showMessageDialog(null, "No matching users found.");
        }
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error reading file.");
    }

    }//GEN-LAST:event_Btn_SearchActionPerformed

    private void BtnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnResetActionPerformed
        loadItemToTable();
        
        U_Name.setText("");
    }//GEN-LAST:event_BtnResetActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

        private void savedeletedItemToFile() {
        String filePath = "users.txt";
        try {
            FileManager.saveTableDataToFile(Table, filePath);
            
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving supplier data: " + e.getMessage());
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserManagementFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAdd;
    private javax.swing.JButton BtnClear;
    private javax.swing.JButton BtnDelete;
    private javax.swing.JButton BtnReset;
    private javax.swing.JButton BtnUpdate;
    private javax.swing.JButton Btn_Search;
    private javax.swing.JComboBox<String> CB1;
    private javax.swing.JTextField Pswd;
    private javax.swing.JTable Table;
    private javax.swing.JTextField U_Name;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
