/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import Management.InventoryManager;

import Models.Transaction;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

import java.time.LocalDate;
import java.time.ZoneId;

import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
/**
 *
 * @author USER
 */
public class TransactionManagementFrame extends javax.swing.JFrame {
    private InventoryManager inventoryManager;
    
    public TransactionManagementFrame() {
        initComponents();
        
        
        inventoryManager = new InventoryManager();
        customizeComboBox();
        
        loadTransactionsFromFile();
    }
    
    private void customizeComboBox() {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement("Choose Transaction Type");
        model.addElement("Received from Supplier");
        model.addElement("Distributed to Hospital");
        comboboxInventoryTransactionType.setModel(model);
        comboboxInventoryTransactionType.addActionListener(this::comboboxInventoryTransactionTypeActionPerformed);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnPrintAvailableQuantity = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTransactions = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lblItemCode = new javax.swing.JLabel();
        btnClearAll = new javax.swing.JButton();
        txtInventoryItemCode = new javax.swing.JTextField();
        lblSHCode = new javax.swing.JLabel();
        txtInventorySHCode = new javax.swing.JTextField();
        lblQuantityRD = new javax.swing.JLabel();
        txtInventoryQuantity = new javax.swing.JTextField();
        closebutton = new javax.swing.JButton();
        comboboxInventoryTransactionType = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        btnTrackBetweenDates = new javax.swing.JButton();
        lblSHCode1 = new javax.swing.JLabel();
        lblSHCode2 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        lblSHCode3 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        txtStartDate = new com.toedter.calendar.JDateChooser();
        txtEndDate = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(440, 95));
        setUndecorated(true);
        setResizable(false);

        btnPrintAvailableQuantity.setBackground(new java.awt.Color(153, 255, 255));
        btnPrintAvailableQuantity.setText("Print Available Quantity");
        btnPrintAvailableQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintAvailableQuantityActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(153, 255, 153));
        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        tableTransactions.setBackground(new java.awt.Color(204, 255, 204));
        tableTransactions.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tableTransactions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Transaction Type", "Item Code", "Supplier/Hospital Code", "Quantity Received/Distributed", "Date-Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableTransactions);
        if (tableTransactions.getColumnModel().getColumnCount() > 0) {
            tableTransactions.getColumnModel().getColumn(1).setPreferredWidth(5);
            tableTransactions.getColumnModel().getColumn(2).setPreferredWidth(5);
            tableTransactions.getColumnModel().getColumn(3).setPreferredWidth(5);
        }

        jLabel1.setBackground(new java.awt.Color(204, 204, 255));
        jLabel1.setFont(new java.awt.Font("UA Cadet", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 204, 0));
        jLabel1.setText("TRANSACTION MANAGEMENT");

        lblItemCode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblItemCode.setText("Item Code ");

        btnClearAll.setBackground(new java.awt.Color(0, 255, 204));
        btnClearAll.setText("CLEAR ALL");
        btnClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAllActionPerformed(evt);
            }
        });

        txtInventoryItemCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInventoryItemCodeActionPerformed(evt);
            }
        });

        lblSHCode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblSHCode.setText("Supplier/Hospital Code");

        lblQuantityRD.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblQuantityRD.setText("Quantity Received/Distributed");

        closebutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/2.png"))); // NOI18N
        closebutton.setAlignmentY(0.0F);
        closebutton.setBorderPainted(false);
        closebutton.setMinimumSize(new java.awt.Dimension(50, 50));
        closebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closebuttonActionPerformed(evt);
            }
        });

        comboboxInventoryTransactionType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboboxInventoryTransactionType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboboxInventoryTransactionTypeActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Transaction Type:");

        btnTrackBetweenDates.setBackground(new java.awt.Color(255, 153, 255));
        btnTrackBetweenDates.setText("Track");
        btnTrackBetweenDates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTrackBetweenDatesActionPerformed(evt);
            }
        });

        lblSHCode1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblSHCode1.setText("Start Date:");

        lblSHCode2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblSHCode2.setText("End Date:");

        btnDelete.setBackground(new java.awt.Color(255, 102, 102));
        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblSHCode3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblSHCode3.setText("Track Item Received/Distributed");

        btnSearch.setText("SEARCH");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnReset.setText("RESET");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(178, 178, 178)
                        .addComponent(closebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnClearAll))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblItemCode)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtInventoryItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnSearch))
                                    .addComponent(comboboxInventoryTransactionType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6)
                                    .addComponent(lblSHCode)
                                    .addComponent(txtInventorySHCode, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtInventoryQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblQuantityRD)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33)
                                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSHCode3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(lblSHCode1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblSHCode2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtStartDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(btnTrackBetweenDates, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnPrintAvailableQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(12, 12, 12))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(closebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnClearAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboboxInventoryTransactionType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(lblItemCode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtInventoryItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblSHCode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtInventorySHCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(lblQuantityRD)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtInventoryQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd)
                            .addComponent(btnDelete))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnReset)
                        .addGap(18, 18, 18)
                        .addComponent(lblSHCode3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSHCode1)
                            .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSHCode2)
                            .addComponent(txtEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTrackBetweenDates)
                        .addGap(26, 26, 26)
                        .addComponent(btnPrintAvailableQuantity)
                        .addGap(0, 9, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAllActionPerformed
        clearFields();
    }//GEN-LAST:event_btnClearAllActionPerformed

    private void txtInventoryItemCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInventoryItemCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInventoryItemCodeActionPerformed

    private void closebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closebuttonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_closebuttonActionPerformed

    private void comboboxInventoryTransactionTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxInventoryTransactionTypeActionPerformed

        String selectedTransactionType = comboboxInventoryTransactionType.getSelectedItem().toString();

        switch (selectedTransactionType) {
            case "Choose Transaction Type":
                lblSHCode.setText("Supplier/Hospital Code");
                lblQuantityRD.setText("Quantity Received/Distributed");
                break;
                
            case "Received from Supplier":
                lblSHCode.setText("Code (Supplier)");
                lblQuantityRD.setText("Quantity Received from Supplier");
                break;

            case "Distributed to Hospital":
                lblSHCode.setText("Code (Hospital)");
                lblQuantityRD.setText("Quantity Distributed to Hospital");
                break;

            default:
                break;
        }       
    }//GEN-LAST:event_comboboxInventoryTransactionTypeActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String selectedTransactionType = comboboxInventoryTransactionType.getSelectedItem().toString();
        String itemCode = txtInventoryItemCode.getText();
        String supplierHospitalCode = txtInventorySHCode.getText();
        String quantityStr = txtInventoryQuantity.getText().trim();
        
        if (itemCode.isEmpty() || supplierHospitalCode.isEmpty() || quantityStr.isEmpty() || selectedTransactionType.equals("Choose Transaction Type")) {
            JOptionPane.showMessageDialog(null, "Please fill in all fields before proceeding.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;  // Exit the method if any field is empty
        }
        
        if (!itemCodeExists(itemCode)) {
            JOptionPane.showMessageDialog(null, "Item Code does not exist. Please enter a valid item code.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if ("Received from Supplier".equals(selectedTransactionType) && !codeExists(supplierHospitalCode, "suppliers.txt")) {
            JOptionPane.showMessageDialog(null, "Supplier Code does not exist. Please enter a valid supplier code.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else if ("Distributed to Hospital".equals(selectedTransactionType) && !codeExists(supplierHospitalCode, "hospitals.txt")) {
            JOptionPane.showMessageDialog(null, "Hospital Code does not exist. Please enter a valid hospital code.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Validate that quantity is a valid integer
        int quantity;
        try {
            quantity = Integer.parseInt(quantityStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter a valid number for quantity.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;  // Exit the method if quantity is not a valid number
        }
        
        // Adjust quantity based on transaction type
        if (selectedTransactionType.equals("Distributed to Hospital")) {
            quantity = -Math.abs(quantity); 
        } else if (selectedTransactionType.equals("Received from Supplier")) {
            quantity = Math.abs(quantity); 
        }
        
        
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date date = new Date();
        String dateTime = formatter.format(date);
        saveTransaction(selectedTransactionType, itemCode, supplierHospitalCode, quantity, dateTime);
        
        updateInventoryInFile(itemCode, quantity);
        
        loadTransactionsFromFile();
        
        
        
        JOptionPane.showMessageDialog(null, "Inventory updated successfully.");
    }//GEN-LAST:event_btnAddActionPerformed
    
    private boolean itemCodeExists(String itemCode) {
        String filePath = "ppe.txt";  
        File file = new File(filePath);

        if (!file.exists()) {
            return false;  // File does not exist, thus item code cannot exist
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            reader.readLine();  // Skip the header line

            while ((line = reader.readLine()) != null) {
                String[] parts = line.split("\t");  // Split by tab
                if (parts[0].equals(itemCode)) {
                    return true;  // Item code found
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error reading from PPE file: " + e.getMessage(), "File Read Error", JOptionPane.ERROR_MESSAGE);
        }

        return false;  // Item code not found
    }
    
    private boolean codeExists(String code, String filePath) {
        File file = new File(filePath);
        if (!file.exists()) {
            return false;  
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            reader.readLine();  

            while ((line = reader.readLine()) != null) {
                String[] parts = line.split("\t");
                if (parts[0].equals(code)) {
                    return true;  
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error reading from file: " + e.getMessage(), "File Read Error", JOptionPane.ERROR_MESSAGE);
        }

        return false;  
    }
    
    private void btnPrintAvailableQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintAvailableQuantityActionPerformed
        // Create a new instance of InitialInventoryManagementFrame
        InitialInventoryManagementFrame inventoryFrame = new InitialInventoryManagementFrame(inventoryManager);
        
        this.dispose();
        
        inventoryFrame.setVisible(true);
    }//GEN-LAST:event_btnPrintAvailableQuantityActionPerformed

    private void btnTrackBetweenDatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTrackBetweenDatesActionPerformed
        String selectedTransactionType = comboboxInventoryTransactionType.getSelectedItem().toString();
        // Get the date from the start and end date choosers
        Date startDate = txtStartDate.getDate();
        Date endDate = txtEndDate.getDate();

        // Check if dates are null
        if (startDate == null || endDate == null) {
            JOptionPane.showMessageDialog(this, "Please enter both start and end dates.");
            return;
        }
        if (selectedTransactionType.equals("Choose Transaction Type")) {
            JOptionPane.showMessageDialog(this, "Please select a Transaction Type.");
            return;
        }

        // Convert Date to LocalDate
        LocalDate startLocalDate = startDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        LocalDate endLocalDate = endDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

        // Define start and end LocalDateTime for range
        LocalDateTime startDateTime = startLocalDate.atStartOfDay();
        LocalDateTime endDateTime = endLocalDate.atTime(23, 59, 59);

        // Load the items from the file using loadItemsFromFile()
        List<Transaction> transactionList;
        try {
            transactionList = inventoryManager.loadTransactionsFromFile(); 
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading item data: " + e.getMessage());
            return;
        }

        // Clear the current table data
        DefaultTableModel model = (DefaultTableModel) tableTransactions.getModel();
        model.setRowCount(0);

        // Loop through the items and filter by the date range
        for (Transaction transaction : transactionList) {
            LocalDateTime transactionDateTime = transaction.getLastUpdated(); // Get LocalDateTime

            // Check if the item date falls within the selected date range
            if (!transactionDateTime.isBefore(startDateTime) && !transactionDateTime.isAfter(endDateTime) &&
                transaction.getTransactionType().equalsIgnoreCase(selectedTransactionType)) {

                // Add the transaction to the table
                model.addRow(new Object[]{
                    transaction.getTransactionType(),
                    transaction.getItemCode(),
                    transaction.getSupplierHospitalCode(),
                    transaction.getQuantityInStock(),
                    transaction.getLastUpdated().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))
                });
            }
        }
    }//GEN-LAST:event_btnTrackBetweenDatesActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String selectedTransactionType = comboboxInventoryTransactionType.getSelectedItem().toString();
        String itemCode = txtInventoryItemCode.getText().trim();
        String TxtInventorySHCode = txtInventorySHCode.getText().trim(); 

        if (itemCode.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter an Item Code.");
            return;
        }

        if (selectedTransactionType.equals("Choose Transaction Type")) {
            JOptionPane.showMessageDialog(this, "Please select a Transaction Type.");
            return;
        }

        try {
            List<Transaction> transactionList = inventoryManager.loadTransactionsFromFile();

            
            DefaultTableModel model = (DefaultTableModel) tableTransactions.getModel();
            model.setRowCount(0);

            int totalQuantity = 0; // Sum the quantity for the specific supplier/hospital

            // Check if searching by supplier/hospital code
            if (!TxtInventorySHCode.isEmpty()) {
                // Only show sum of the quantities for the supplier/hospital
                for (Transaction transaction : transactionList) {
                    if (transaction.getItemCode().equalsIgnoreCase(itemCode) && 
                        transaction.getSupplierHospitalCode().equalsIgnoreCase(TxtInventorySHCode)) {

                        // Check transaction type and sum the quantities
                        if (transaction.getTransactionType().equalsIgnoreCase("Distributed to Hospital") ||
                            transaction.getTransactionType().equalsIgnoreCase("Received from Supplier")) {
                            totalQuantity += transaction.getQuantityInStock();
                        }
                    }
                }

                // Display the total quantity in the JTable
                model.addRow(new Object[]{
                    selectedTransactionType, 
                    itemCode,                
                    TxtInventorySHCode,      
                    totalQuantity,           
                    ""                       
                });
            } else {
                // Normal filtering and displaying without supplier/hospital code sum
                boolean found = false; // Track if any records match
                for (Transaction transaction : transactionList) {
                    if (transaction.getItemCode().equalsIgnoreCase(itemCode) &&
                        transaction.getTransactionType().equalsIgnoreCase(selectedTransactionType)) {

                        // Add filtered transactions to the table
                        model.addRow(new Object[]{
                            transaction.getTransactionType(),
                            transaction.getItemCode(),
                            transaction.getSupplierHospitalCode(),
                            transaction.getQuantityInStock(),
                            transaction.getLastUpdated().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))
                        });
                        found = true;
                    }
                }

                // If no matching records were found
                if (!found) {
                    JOptionPane.showMessageDialog(this, "No matching transactions found.");
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading transaction data: " + e.getMessage());
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        loadTransactionsFromFile();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = tableTransactions.getSelectedRow();

        if (selectedRow != -1) {
            // Retrieve the transaction details from the selected row
            String transactionType = tableTransactions.getValueAt(selectedRow, 0).toString();
            String itemCode = tableTransactions.getValueAt(selectedRow, 1).toString();
            String supplierHospitalCode = tableTransactions.getValueAt(selectedRow, 2).toString();
            int originalQuantity = Integer.parseInt(tableTransactions.getValueAt(selectedRow, 3).toString());
            
            int adjustedQuantity = originalQuantity;
            
            

            
            if (transactionType.equals("Distributed to Hospital")) {
                adjustedQuantity = Math.abs(originalQuantity); // Make the quantity positive to reverse
            } else if (transactionType.equals("Received from Supplier")) {
                adjustedQuantity = -Math.abs(originalQuantity); // Make the quantity negative to reverse
            }
            
            DefaultTableModel model = (DefaultTableModel) tableTransactions.getModel();
            model.removeRow(selectedRow);
            // Update inventory in ppe.txt by reversing the quantity change
            updateInventoryInFile(itemCode, adjustedQuantity);

            // Remove the transaction from transactions.txt
            removeTransactionFromFile(transactionType, itemCode, supplierHospitalCode, originalQuantity);

            JOptionPane.showMessageDialog(this, "Transaction deleted successfully.");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a transaction to delete!");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    
    private void loadTransactionsFromFile() {
        String filePath = "transactions.txt"; 
        DefaultTableModel model = (DefaultTableModel) tableTransactions.getModel();
        model.setRowCount(0); 

        File file = new File(filePath);  // Create a File object for transactions.txt

        if (!file.exists()) {
            try {
                file.createNewFile();  // Create the file
                
                try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {
                    bw.write("Transaction Type\tItem Code\tSupplier/Hospital Code\tQuantity Received/Distributed\tDate-Time");
                    bw.newLine();
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error creating transaction file: " + e.getMessage());
                return;
            }
        }

        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            boolean isFirstLine = true;

            // Read the file line by line
            while ((line = br.readLine()) != null) {
                if (isFirstLine) {
                    
                    isFirstLine = false;
                    continue;
                }

                
                String[] values = line.split("\t");

                
                model.addRow(values);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading transactions: " + e.getMessage());
        }
    }
    
    private void saveTransaction(String transactionType, String itemCode, String supplierHospitalCode, int quantity, String dateTime) {
        String filePath = "transactions.txt";  
        File file = new File(filePath);

        // Check if the file is empty or does not exist
        boolean fileIsEmpty = file.length() == 0;

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(filePath, true))) {
            if (fileIsEmpty) {
                // If the file is new or empty, write the header row
                bw.write("Transaction Type\tItem Code\tSupplier/Hospital Code\tQuantity Received/Distributed\tDate-Time");
                bw.newLine();
            }

            // Write the transaction details
            bw.write(transactionType + "\t" + itemCode + "\t" + supplierHospitalCode + "\t" + quantity + "\t" + dateTime);
            bw.newLine();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error logging transaction: " + e.getMessage());
        }
    }
    
    private void removeTransactionFromFile(String transactionType, String itemCode, String supplierHospitalCode, int quantity) {
        String filePath = "transactions.txt";
        List<String> updatedTransactions = new ArrayList<>();
        String header = null;

        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            boolean isFirstLine = true;

            // Read each line and exclude the one matching the transaction to delete
            while ((line = br.readLine()) != null) {
                if (isFirstLine) {
                    // Store the header line and skip it during comparison
                    header = line;
                    isFirstLine = false;
                    continue;
                }
                
                String[] values = line.split("\t");
                if (!(values[0].equals(transactionType) && values[1].equals(itemCode) &&
                      values[2].equals(supplierHospitalCode) && Integer.parseInt(values[3].trim()) == quantity)) {
                    updatedTransactions.add(line);
                }
            }

            // Write the updated transactions back to the file
            try (BufferedWriter bw = new BufferedWriter(new FileWriter(filePath))) {
                if (header != null) {
                    bw.write(header);  // Write the header back first
                    bw.newLine();
                }
                for (String transaction : updatedTransactions) {
                    bw.write(transaction);
                    bw.newLine();
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error deleting transaction: " + e.getMessage());
        }
    }
    
    private List<String[]> loadInventoryData() {
        List<String[]> inventoryData = new ArrayList<>();
        String filePath = "ppe.txt";

        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            boolean isFirstLine = true;

            while ((line = br.readLine()) != null) {
                if (isFirstLine) {
                    // Skip the header row
                    isFirstLine = false;
                    continue;
                }
                // Split each line into fields (columns)
                String[] values = line.split("\t");
                inventoryData.add(values);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading inventory file: " + e.getMessage());
        }

        return inventoryData;
    }
    
    private void updateInventoryInFile(String itemCode, int quantityChange) {
        List<String[]> inventoryData = loadInventoryData();
        boolean itemFound = false;
        String filePath = "ppe.txt";

        // Update the item quantity and last updated time
        for (String[] item : inventoryData) {
            if (item[0].equals(itemCode)) {  
                int currentQuantity = Integer.parseInt(item[3]);  
                int newQuantity = currentQuantity + quantityChange;

                item[3] = String.valueOf(newQuantity);  

                // Update the Last Updated column
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                item[4] = dtf.format(LocalDateTime.now());  

                itemFound = true;
                break;
            }
        }

        if (itemFound) {
            // Write the updated inventory back to the file
            try (BufferedWriter bw = new BufferedWriter(new FileWriter(filePath))) {
                
                bw.write("Item Code\tItem Name\tSupplier Code\tQuantityInStock(boxes)\tLast Updated");
                bw.newLine();

                // Write each item back to the file
                for (String[] item : inventoryData) {
                    bw.write(String.join("\t", item));
                    bw.newLine();
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error saving inventory: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Item code not found in inventory!");
        }
    }
    
    private void clearFields() {
        txtInventoryItemCode.setText("");
        txtInventorySHCode.setText("");
        txtInventoryQuantity.setText("");
        comboboxInventoryTransactionType.setSelectedIndex(0);
        lblSHCode.setText("Supplier/Hospital Code");  // Set to a default value
        lblQuantityRD.setText("Quantity Received/Distributed");
    }    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TransactionManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TransactionManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TransactionManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TransactionManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TransactionManagementFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClearAll;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnPrintAvailableQuantity;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnTrackBetweenDates;
    private javax.swing.JButton closebutton;
    private javax.swing.JComboBox<String> comboboxInventoryTransactionType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblItemCode;
    private javax.swing.JLabel lblQuantityRD;
    private javax.swing.JLabel lblSHCode;
    private javax.swing.JLabel lblSHCode1;
    private javax.swing.JLabel lblSHCode2;
    private javax.swing.JLabel lblSHCode3;
    private javax.swing.JTable tableTransactions;
    private com.toedter.calendar.JDateChooser txtEndDate;
    private javax.swing.JTextField txtInventoryItemCode;
    private javax.swing.JTextField txtInventoryQuantity;
    private javax.swing.JTextField txtInventorySHCode;
    private com.toedter.calendar.JDateChooser txtStartDate;
    // End of variables declaration//GEN-END:variables
}
