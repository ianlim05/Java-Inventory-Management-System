/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Management.InventoryManager;
import Models.Item;
import Utils.FileManager;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;


import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

import java.util.Comparator;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jun20
 */
public class InitialInventoryManagementFrame extends javax.swing.JFrame {
 
    private InventoryManager inventoryManager;
    private DefaultTableModel model;
    /**
     * Creates new form Item_Inventory
     * @param inventoryManager
     */
    public InitialInventoryManagementFrame(InventoryManager inventoryManager) {
        initComponents();
        
        
        this.inventoryManager = inventoryManager;
        model = (DefaultTableModel) tableItem.getModel();
        
        loadSortedItemsToTable();
        
        // Close the previous InventoryManagementFrame 
        if (inventoryManager.getPreviousFrame() != null) {
            inventoryManager.getPreviousFrame().dispose();
        }
        inventoryManager.setPreviousFrame(this);
    }
    
    

    private void loadSortedItemsToTable() {
        
        try {
            List<Item> itemList = inventoryManager.loadPPEFromFile();
            
            itemList.sort(Comparator.comparing(Item::getItemCode));
            // Clear the table before loading new data
            model.setRowCount(0);
            
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            for (Item item : itemList) {
                model.addRow(new Object[]{
                    item.getItemCode(), 
                    item.getItemName(), 
                    item.getSupplierCode(), 
                    item.getQuantityInStock(), 
                    item.getLastUpdated().format(formatter)
                });
            }
        } catch (IOException e) {
            
        }
    }
    
    private void loadItemsToTable() {
        String filePath = "ppe.txt";  // Relative path to the project folder
        File file = new File(filePath);  // Create a File object for ppe.txt

        if (!file.exists()) {
            try {
                file.createNewFile();  // Create the file
                
                try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {
                    bw.write("Item Code\tItem Name\tSupplier Code\tQuantityInStock(boxes)\tLast Updated");
                    bw.newLine();
                }
                return;
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error creating item file: " + e.getMessage());
                return;
            }
        }

        try {
            // Clear the table before loading new data
            model.setRowCount(0);
            FileManager.loadTableDataFromFile(tableItem, filePath);
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

            // Loop through the rows in the table and format the date column
            for (int row = 0; row < model.getRowCount(); row++) {
                String dateStr = model.getValueAt(row, 4).toString();  // Get the last updated date (5th column)
                LocalDateTime dateTime = LocalDateTime.parse(dateStr, formatter);  // Parse the existing date
                model.setValueAt(dateTime.format(formatter), row, 4);   // Set the formatted date back into the table
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableItem = new javax.swing.JTable();
        txtItemCode = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        I_NAME = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        Quantity = new javax.swing.JTextField();
        BtnAdd = new javax.swing.JButton();
        btnClearAll = new javax.swing.JButton();
        BtnDelete = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        S_Code = new javax.swing.JTextField();
        closebutton = new javax.swing.JButton();
        btnLowStock = new javax.swing.JButton();
        btnItemStock = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 255));
        setLocation(new java.awt.Point(440, 120));
        setUndecorated(true);

        jLabel1.setFont(new java.awt.Font("UA Cadet", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Inventory Management");

        tableItem.setBackground(new java.awt.Color(255, 204, 153));
        tableItem.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tableItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Supplier Code", "QuantityInStock(boxes)", "Last Updated"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableItem);
        if (tableItem.getColumnModel().getColumnCount() > 0) {
            tableItem.getColumnModel().getColumn(0).setPreferredWidth(5);
            tableItem.getColumnModel().getColumn(1).setPreferredWidth(10);
            tableItem.getColumnModel().getColumn(2).setPreferredWidth(10);
            tableItem.getColumnModel().getColumn(3).setPreferredWidth(5);
            tableItem.getColumnModel().getColumn(4).setPreferredWidth(60);
        }

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 255));
        jLabel2.setText("Item Code                               :");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Item Name                             :");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Quantity In Stock (boxes)     :");

        BtnAdd.setBackground(new java.awt.Color(153, 255, 153));
        BtnAdd.setText("Add");
        BtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAddActionPerformed(evt);
            }
        });

        btnClearAll.setBackground(new java.awt.Color(0, 255, 204));
        btnClearAll.setText("CLEAR ALL");
        btnClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAllActionPerformed(evt);
            }
        });

        BtnDelete.setBackground(new java.awt.Color(255, 102, 102));
        BtnDelete.setText("Delete");
        BtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDeleteActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Supplier Code                         :");

        closebutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/2.png"))); // NOI18N
        closebutton.setAlignmentY(0.0F);
        closebutton.setBorderPainted(false);
        closebutton.setMinimumSize(new java.awt.Dimension(50, 50));
        closebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closebuttonActionPerformed(evt);
            }
        });

        btnLowStock.setText("Check Low Stock");
        btnLowStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLowStockActionPerformed(evt);
            }
        });

        btnItemStock.setBackground(new java.awt.Color(204, 204, 255));
        btnItemStock.setText("Check Item Stock");
        btnItemStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItemStockActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 255));
        jLabel6.setText("Fill in ITEM CODE to Check Item Stock");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(BtnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(35, 35, 35)
                            .addComponent(BtnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(btnClearAll)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jLabel2))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(S_Code, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(I_NAME, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(10, 10, 10)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReset, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnLowStock, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnItemStock, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)))
                .addGap(12, 12, 12))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnClearAll)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(I_NAME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(S_Code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BtnDelete)
                            .addComponent(BtnAdd))
                        .addGap(17, 17, 17)
                        .addComponent(btnReset)
                        .addGap(37, 37, 37)
                        .addComponent(btnLowStock)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnItemStock)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAddActionPerformed
        String itemCode = txtItemCode.getText().trim().toUpperCase();
        String itemName = I_NAME.getText().trim();
        String supplierCode = S_Code.getText().trim();
        String quantity = Quantity.getText().trim();
        
        if (itemCode.isEmpty() || itemName.isEmpty() || supplierCode.isEmpty() || quantity.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.");
            return; // Exit the method if any field is empty
        }
        
        if (!isSupplierCodeValid(supplierCode)) {
            // Show error message if the supplier code is not found
            JOptionPane.showMessageDialog(this, "Invalid Supplier Code. Please enter a valid code.");
            return;
        }
        
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String lastUpdated = dtf.format(LocalDateTime.now());
        
        DefaultTableModel model = (DefaultTableModel) tableItem.getModel();
        model.addRow(new Object[]{itemCode, itemName, supplierCode, quantity,lastUpdated});

        // Clear the text fields after adding
        txtItemCode.setText("");
        I_NAME.setText("");
        Quantity.setText("");
        S_Code.setText("");
        
        saveItemToFile();
    
    }//GEN-LAST:event_BtnAddActionPerformed
    
    private boolean isSupplierCodeValid(String supplierCode) {
        String filePath = "suppliers.txt";  

        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            boolean isFirstLine = true;

            // Read the file line by line
            while ((line = br.readLine()) != null) {
                if (isFirstLine) {
                    // Skip the first line (header)
                    isFirstLine = false;
                    continue;
                }

                // Split the line by tab
                String[] values = line.split("\t");  
                if (values[0].equals(supplierCode)) {
                    // If the supplier code matches, return true
                    return true;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading suppliers file: " + e.getMessage());
        }

        // If no match is found, return false
        return false;
    }
    
    private void btnClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAllActionPerformed
         txtItemCode.setText("");
        I_NAME.setText("");
        Quantity.setText("");
        S_Code.setText("");
    }//GEN-LAST:event_btnClearAllActionPerformed

    private void BtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDeleteActionPerformed
        int selectedRow = tableItem.getSelectedRow();
    if (selectedRow != -1) {
        model.removeRow(selectedRow);  // Remove the selected row from the table
        JOptionPane.showMessageDialog(this, "Item deleted successfully");
    } else {
        JOptionPane.showMessageDialog(this, "Please select a row to delete");
    }

    savedeletedItemToFile();

    }//GEN-LAST:event_BtnDeleteActionPerformed

    private void closebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closebuttonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_closebuttonActionPerformed

    private void btnItemStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItemStockActionPerformed
        String itemCodeToCheck = txtItemCode.getText(); // Get item code from the input field
        DefaultTableModel model = (DefaultTableModel) tableItem.getModel();
        int rowCount = model.getRowCount();

        boolean itemFound = false;

        // Loop through the table rows to find the item with the given item code
        for (int i = 0; i < rowCount; i++) {
            String itemCode = model.getValueAt(i, 0).toString();
            if (itemCode.equalsIgnoreCase(itemCodeToCheck)) {
                Object[] row = {
                    model.getValueAt(i, 0), 
                    model.getValueAt(i, 1), 
                    model.getValueAt(i, 2), 
                    model.getValueAt(i, 3), 
                    model.getValueAt(i, 4)  
                };
                DefaultTableModel itemModel = new DefaultTableModel(new Object[]{"Item Code", "Item Name", "Supplier Code", "QuantityInStock(boxes)", "Last Updated"}, 0);
                itemModel.addRow(row);
                tableItem.setModel(itemModel); // Display only the found item
                itemFound = true;
                break;
            }
        }

        if (!itemFound) {
            JOptionPane.showMessageDialog(this, "Item not found.");
        }
    }//GEN-LAST:event_btnItemStockActionPerformed

    private void btnLowStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLowStockActionPerformed
        DefaultTableModel model = (DefaultTableModel) tableItem.getModel();
        int rowCount = model.getRowCount();

        DefaultTableModel lowStockModel = new DefaultTableModel(new Object[]{"Item Code", "Item Name", "Supplier Code", "QuantityInStock(boxes)", "Last Updated"}, 0);

        // Loop through the table rows and filter low stock items
        for (int i = 0; i < rowCount; i++) {
            int quantity = Integer.parseInt(model.getValueAt(i, 3).toString()); 
            if (quantity < 25) {
                Object[] row = {
                    model.getValueAt(i, 0), 
                    model.getValueAt(i, 1), 
                    model.getValueAt(i, 2), 
                    model.getValueAt(i, 3), 
                    model.getValueAt(i, 4)  
                };
                lowStockModel.addRow(row);
            }
        }

        if (lowStockModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No items with stock less than 25 boxes.");
        } else {
            tableItem.setModel(lowStockModel); // Update the table with low stock items
        }
    }//GEN-LAST:event_btnLowStockActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        loadItemsToTable();
    }//GEN-LAST:event_btnResetActionPerformed

    
    private void saveItemToFile() {
            String filePath = "ppe.txt";  // Relative path to the project folder
        try {
            FileManager.saveTableDataToFile(tableItem, filePath);
            JOptionPane.showMessageDialog(this, "Item data added successfully");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving item data: " + e.getMessage());
        }
    }
    
    private void savedeletedItemToFile() {
            String filePath = "ppe.txt";  
        try {
            FileManager.saveTableDataToFile(tableItem, filePath);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving deleted item data: " + e.getMessage());
        }
    }
    
    public void updateInventoryTable(String itemCode, int quantityChange) {
        DefaultTableModel model = (DefaultTableModel) tableItem.getModel();

        // Find the item in the table and update its quantity
        for (int i = 0; i < model.getRowCount(); i++) {
            if (model.getValueAt(i, 0).equals(itemCode)) {
                int currentQuantity = Integer.parseInt(model.getValueAt(i, 3).toString());
                int newQuantity = currentQuantity + quantityChange;
                model.setValueAt(newQuantity, i, 3); // Update the quantity in the table

                // Update the last updated timestamp
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                String lastUpdated = dtf.format(LocalDateTime.now());
                model.setValueAt(lastUpdated, i, 4); // Update the last updated column

                // Save the updated inventory back to ppe.txt
                saveInventoryToFile();
                return;
            }
        }

        JOptionPane.showMessageDialog(this, "Item code not found in inventory!");
    }

    // Save the updated inventory table to ppe.txt
    private void saveInventoryToFile() {
            String filePath = "ppe.txt";  
        try {
            FileManager.saveTableDataToFile(tableItem, filePath);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving inventory data: " + e.getMessage());
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InitialInventoryManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InitialInventoryManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InitialInventoryManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InitialInventoryManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                InventoryManager inventoryManager = new InventoryManager();
                new InitialInventoryManagementFrame(inventoryManager).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAdd;
    private javax.swing.JButton BtnDelete;
    private javax.swing.JTextField I_NAME;
    private javax.swing.JTextField Quantity;
    private javax.swing.JTextField S_Code;
    private javax.swing.JButton btnClearAll;
    private javax.swing.JButton btnItemStock;
    private javax.swing.JButton btnLowStock;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton closebutton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableItem;
    private javax.swing.JTextField txtItemCode;
    // End of variables declaration//GEN-END:variables
}
